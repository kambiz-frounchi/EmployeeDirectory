{"version":3,"sources":["components/Jumbotron.js","components/Card.js","components/Sidepane.js","db.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","props","id","className","Card","firstName","lastName","title","department","managerFirstName","managerLastName","Sidepane","useState","name","setName","type","placeholder","aria-label","aria-describedby","onChange","e","value","target","onClick","filterByName","removeFilterByName","sortByName","sortByNameDescending","Employee","this","employees","push","db","App","setEmployees","useEffect","filteredEmployees","filter","employee","nameCaps","toUpperCase","firstNameCaps","lastNameCaps","includes","sortedEmployees","sort","employeeA","employeeB","firstNameA","firstNameB","lastNameA","lastNameB","map","index","key","populateEmployees","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cca143fe.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbotron(props) {\r\n    return (\r\n        <div id=\"header\" className=\"jumbotron\">\r\n            <h1>Employee Directory</h1>\r\n        </div>   \r\n    );\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div id=\"employee-card\" className=\"card\">\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\"><strong>{props.firstName} {props.lastName}</strong></h5>\r\n                <h6 className=\"card-subtitle mb-2\"><strong>Title: </strong>{props.title}</h6>\r\n                <h6 className=\"card-subtitle mb-2\"><strong>Department: </strong>{props.department}</h6>\r\n                <h6 className=\"card-subtitle mb-2\"><strong>Manager: </strong>{props.managerFirstName} {props.managerLastName}</h6>\r\n            </div>\r\n        </div>   \r\n    );\r\n}\r\n\r\n\r\nexport default Card;","import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Sidepane(props) {\r\n    const [name, setName] = useState();\r\n\r\n    const setNameFilter = (value) => {\r\n        setName(value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <nav className=\"d-md-block bg-light sidebar\">\r\n                <div className=\"input-group\">\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"name\"\r\n                        aria-label=\"name\"\r\n                        aria-describedby=\"basic-addon2\"\r\n                        onChange = {e => setNameFilter(e.target.value)}/>\r\n                    <div className=\"input-group-append\">\r\n                        <button id=\"filter-btn\" className=\"btn btn-outline-secondary\" type=\"button\" onClick={() => {props.filterByName(name)}}>Filter</button>\r\n                        <button id=\"sort-btn\" className=\"btn btn-outline-secondary\" type=\"button\" onClick={props.removeFilterByName}>Undo Filter</button>\r\n                        <button id=\"sort-btn\" className=\"btn btn-outline-secondary\" type=\"button\" onClick={props.sortByName}>Sort</button>\r\n                        <button id=\"sort-btn\" className=\"btn btn-outline-secondary\" type=\"button\" onClick={props.sortByNameDescending}>Sort Descending</button>\r\n\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Sidepane;","class Employee {\r\n    constructor (firstName, lastName, title, managerFirstName, managerLastName, department) {\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n        this.title = title;\r\n        this.managerFirstName = managerFirstName;\r\n        this.managerLastName = managerLastName;\r\n        this.department = department;\r\n    }\r\n}\r\n\r\nconst employees = [];\r\n\r\nemployees.push(new Employee (\"Kambiz\", \"Frounchi\", \"Senior Software Engineer\", \"Brad\", \"Lawrence\", \"R&D\"));\r\nemployees.push(new Employee (\"Kaveh\", \"Frounchi\", \"Junior Software Engineer\", \"Stacey\", \"Summers\", \"R&D\"));\r\nemployees.push(new Employee (\"Jenny\", \"Wang\", \"Junior Test Engineer\", \"Brad\", \"Lawrence\", \"R&D\"));\r\nemployees.push(new Employee (\"Cassandra\", \"Bing\", \"Senior Accountant\", \"Sarah\", \"Hashemi\", \"Finance\"));\r\nemployees.push(new Employee (\"Jacky\", \"Davis\", \"Junior Accountant\", \"Sarah\", \"Hashemi\", \"Finance\"));\r\n\r\nconst db = {employees: employees};\r\n\r\nexport default db;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Jumbotron from \"./components/Jumbotron\";\nimport Card from \"./components/Card\";\nimport Sidepane from \"./components/Sidepane\";\nimport './bootstrap/dist/css/bootstrap.min.css';\nimport db from \"./db\";\n\nfunction App() {\n  \n  const [employees, setEmployees] = useState();\n\n  const populateEmployees = (employees) => {\n    if (employees) {\n      return employees.map((employee, index) => {\n        return <Card key={index} {...employee}/>;\n      });\n    }\n  }\n\n  useEffect(() => {\n    setEmployees(db.employees);\n  }, []);\n\n  //find any employees that include the input name in their first or last name\n  const filterByName = (name) => {\n    const filteredEmployees = db.employees.filter((employee) => {\n      const nameCaps = name.toUpperCase();\n      const firstNameCaps = employee.firstName.toUpperCase();\n      const lastNameCaps = employee.lastName.toUpperCase();\n      return (firstNameCaps.includes(nameCaps) || lastNameCaps.includes(nameCaps));\n    });\n\n    setEmployees(filteredEmployees);\n  }\n\n  //undo name filter\n  const removeFilterByName = () => {\n    setEmployees(db.employees);\n  }\n  \n  //sort in ascending order using firstName and then last name\n  const sortByName = () => {\n    const sortedEmployees = [...employees];\n    sortedEmployees.sort((employeeA, employeeB) => {\n      const firstNameA = employeeA.firstName.toUpperCase();\n      const firstNameB = employeeB.firstName.toUpperCase();\n\n      if (firstNameA < firstNameB) return -1;\n      if (firstNameA > firstNameB) return 1;\n      if (firstNameA === firstNameB) {\n        const lastNameA = employeeA.lastName.toUpperCase();\n        const lastNameB = employeeB.lastName.toUpperCase();\n        if (lastNameA < lastNameB) return -1;\n        if (lastNameA > lastNameB) return 1;\n      }\n\n      return 0;\n    });\n\n    setEmployees(sortedEmployees);\n  }\n\n  //sort in descending order using first name and then last name\n  const sortByNameDescending = () => {\n    const sortedEmployees = [...employees];\n    sortedEmployees.sort((employeeA, employeeB) => {\n      const firstNameA = employeeA.firstName.toUpperCase();\n      const firstNameB = employeeB.firstName.toUpperCase();\n\n      if (firstNameA < firstNameB) return 1;\n      if (firstNameA > firstNameB) return -1;\n      if (firstNameA === firstNameB) {\n        const lastNameA = employeeA.lastName.toUpperCase();\n        const lastNameB = employeeB.lastName.toUpperCase();\n        if (lastNameA < lastNameB) return 1;\n        if (lastNameA > lastNameB) return -1;\n      }\n\n      return 0;\n    });\n\n    setEmployees(sortedEmployees);\n  };\n\n  return (\n    <div className=\"App\">\n      <Jumbotron/>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-4\">\n            <Sidepane \n              filterByName={(name) => filterByName(name)} \n              sortByName={sortByName}\n              removeFilterByName={removeFilterByName}\n              sortByNameDescending ={sortByNameDescending}\n            />  \n          </div>\n          <div id=\"employees-div\" className=\"col-md-8\">\n            {populateEmployees(employees)}  \n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}